@page "/join-meeting/{MeetingId}/{Passcode}"
@using System.ComponentModel.DataAnnotations
@using VideoConferenceApp.Shared.Meeting.Responses
@layout AttendeeLayout


@code {
	int PageOpacity = 0;
	bool IsModalOpen = false;
	bool ShowLoader = false;
	bool IsModalMessageOpen = false;
	string Message = string.Empty;
	const string ContainerId = "client-video-container";

	Profile ConnectProfile = new();

	[Parameter]
	public string MeetingId { get; set; } = string.Empty;

	[Parameter]
	public string MeetingPasscode { get; set; } = string.Empty;

	protected override void OnParametersSet()
	{
		// Verify meeting credential not null
		if (string.IsNullOrEmpty(MeetingId) || string.IsNullOrEmpty(MeetingPasscode))
		{
			Message = "Unable to connect to server: invalid credentials provided";
			IsModalMessageOpen = true;
			return;
		}
	}

	protected async override Task OnInitializedAsync()
	{
		IsModalOpen = true;
		TwilioServiceResponse? response = await twilioService.GenerateMeetingToken(ConnectProfile.Name, MeetingId);

		if (!response.IsSuccess)
		{
			Message = response.Message!;
			ShowLoader = false;
			IsModalMessageOpen = true;
			IsModalOpen = false;
			return;
		}

		// Join twilio meeting with token
		await twilioService.JoinMeeting(token: response.Data!, roomName: MeetingId, containerId: ContainerId);

		PageOpacity = 1;
		ShowLoader = false;
	}

	void Ok() => IsModalMessageOpen = false;


	public class Profile
	{
		[Required]
		public string Name { get; set; } = string.Empty;
	}
}
